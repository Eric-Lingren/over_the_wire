{
    "banditData" : [
        {
            "level" : "00",
            "goal" : "The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.",
            "commands" : "ssh, ls, cd, cat, file, du, find",
            "answer": "boJ9jbbUNNfktd78OOpsqOltutMc3MY1",
            "image" : "/images/bandit/level00.png",
            "takeaways" : "Use cat to display the contents of a file inline."
        },
        {
            "level" : "01",
            "goal" : "The password for the next level is stored in a file called - located in the home directory",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9",
            "image" : "/images/bandit/level01.png",
            "takeaways" : "In order to access a file that doesn't start with a letter/number in Linux, you need to preface that with a realative path.  By using a './' before the file name of '-' we are able to tell the OS that we want the file in our current working directory which is called - ."
        },
        {
            "level" : "02",
            "goal" : "The password for the next level is stored in a file called spaces in this filename located in the home directory",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK",
            "image" : "/images/bandit/level02.png",
            "takeaways" : "Use tab to autocomplete the filenames in order to have proper path name formatting. A backslash will escape your spaces."
        },
        {
            "level" : "03",
            "goal" : "The password for the next level is stored in a hidden file in the inhere directory.",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "pIwrPrtPN36QITSp3EQaw936yaFoFgAB",
            "image" : "/images/bandit/level03.png",
            "takeaways" : "When using the 'ls' command you will not see hidden files.  You must add the '-a' switch in order to see all files/folders in that directory.  By combining the '-l' switch with the '-a' switch, we are able to list out all items in a list view to provide more details."
        },
        {
            "level" : "04",
            "goal" : "The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "koReBOKuIDDepwhWk7jZC0RTdopnAYKh",
            "image" : "/images/bandit/level04.png",
            "takeaways" : "The file command shows you more information about a file.  In this case we are able to determine if a file is a data file or a human readabe ASCII file by using the file operator.  This is slightly faster than opening each file individually to check if it is human readable, although I am sure there is a way to combine the file and find operations to search through a directory and return all ASCII files."
        },
        {
            "level" : "05",
            "goal" : "The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties: human-readable, 1033 bytes in size, not executable",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "DXjZPULLxYr17uwoI01bNLQbtFemEgo7",
            "image" : "/images/bandit/level05.png",
            "takeaways" : "Finding a file by size is probably the most specific of the 3 options they give us.  We can find all files that have a size that matches our requirements.  In this case we use -size 1033c.  The c means bytes.  We also could have used the suffix k for kilobytes, M for megabytes or G for gigabytes."
        },
        {
            "level" : "06",
            "goal" : "TThe password for the next level is stored somewhere on the server and has all of the following properties: owned by user bandit7, owned by group bandit6, 33 bytes in size",
            "commands" : "ls, cd, cat, file, du, find, grep",
            "answer": "HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs",
            "image" : "/images/bandit/level06.png",
            "takeaways" : "The password for this level is stored somewhere on the server, not in our level directory. Therefore it is best for us to begin our search at the root level of the server.  We can get to the root with a cd / command. If we run a find command to search for the file size as we did last time, we will get many permission denied errors. We can remove these with the opperator ' -print 2>/dev/null '.  This command essentially takes all permission denied errors and dumps them in a temporary and disposable file called dev/null to make our output be more legible.  This still doesnt help us much though because there are dozens of files on this server that are 33 bytes.  We can get more specific by using the -user and -group options to filter our search results.  This leaves us with only one file on the server matching our criteria, which we can then view to see our password."
        },
        {
            "level" : "07",
            "goal" : "The password for the next level is stored in the file data.txt next to the word millionth",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd",
            "answer": "cvX2JJa4CFALtqS87jk27qwqGhBM9plV",
            "image" : "/images/bandit/level07.png",
            "takeaways" : "For this level we can use grep to search within a file.  In this case we will search for and print the line from the file that contains the word 'millionth'.  By adding a -n opperator to our command we are also able to see that the line with our keyword and password are on line 96,950 of the file readme.txt"
        },
        {
            "level" : "08",
            "goal" : "The password for the next level is stored in the file data.txt and is the only line of text that occurs only once",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd",
            "answer": "UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR",
            "image" : "/images/bandit/level08.png",
            "takeaways" : "In order to find the only line of text that occurs once, we need to make use of the uniq command.  However this command will only be able to find unique line if the lines are listed in order.  Therefore if the lines are are out of order, it will not be able to tell unique lines file wide, but rather only sequentially.  Our workaround for this is to first sort each line of the file alphabetically with the sort command.  We can then append this sort command by adding a pipe (|) to tell it to find the unique lines once the lines in the file have finished sorting.  By appending the -c opperation to uniq, we can print out the count of how many times a line appears in the file.  Our output shows us that each line occurs exactly 10 times, with the exception of one of the line which occurs only once.  This line is our password."
        },
        {
            "level" : "09",
            "goal" : "The password for the next level is stored in the file data.txt in one of the few human-readable strings, beginning with several ‘=’ characters.",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd",
            "answer": "truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk",
            "image" : "/images/bandit/level09.png",
            "takeaways" : "For this challenge we can use the strings command to print out any characters from a file that have human readable strings.  I am sure there are opperators we can use to filter for certain criteria, but the instructions we quite vague so it is easy enough to scroll through the output looking at each line that starts with a series of = characters to find the one that looks like it will be a password."
        },
        {
            "level" : "10",
            "goal" : "The password for the next level is stored in the file data.txt, which contains base64 encoded data",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd",
            "answer": "IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR",
            "image" : "/images/bandit/level10.png",
            "takeaways" : "For this exercise we need to take the base64 encoded text, convert it to binary and convert the binary into ASCII fromat to decode our password. We can use cat to print the encoded data on the screen.  Because we know it is encoded in base64, we can simply use the pipe operator in conjunciton with our cat opperator and use the base64 command with the switch ' -d '.  This tells it to decode the file from base64 to ASCII.  We could also do the inverse and encode ASCII to base64 by using the switch ' -e '. "
        }
    ]
}