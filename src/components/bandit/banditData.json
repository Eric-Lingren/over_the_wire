{
    "banditData" : [
        {
            "level" : "00",
            "goal" : "The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.",
            "commands" : "ssh, ls, cd, cat, file, du, find",
            "answer": "boJ9jbbUNNfktd78OOpsqOltutMc3MY1",
            "image" : "/images/bandit/level00.png",
            "takeaways" : "Use cat to display the contents of a file inline."
        },
        {
            "level" : "01",
            "goal" : "The password for the next level is stored in a file called - located in the home directory",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9",
            "image" : "/images/bandit/level01.png",
            "takeaways" : "In order to access a file that doesn't start with a letter/number in Linux, you need to preface that with a realative path.  By using a './' before the file name of '-' we are able to tell the OS that we want the file in our current working directory which is called - ."
        },
        {
            "level" : "02",
            "goal" : "The password for the next level is stored in a file called spaces in this filename located in the home directory",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK",
            "image" : "/images/bandit/level02.png",
            "takeaways" : "Use tab to autocomplete the filenames in order to have proper path name formatting. A backslash will escape your spaces."
        },
        {
            "level" : "03",
            "goal" : "The password for the next level is stored in a hidden file in the inhere directory.",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "pIwrPrtPN36QITSp3EQaw936yaFoFgAB",
            "image" : "/images/bandit/level03.png",
            "takeaways" : "When using the 'ls' command you will not see hidden files.  You must add the '-a' switch in order to see all files/folders in that directory.  By combining the '-l' switch with the '-a' switch, we are able to list out all items in a list view to provide more details."
        },
        {
            "level" : "04",
            "goal" : "The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "koReBOKuIDDepwhWk7jZC0RTdopnAYKh",
            "image" : "/images/bandit/level04.png",
            "takeaways" : "The file command shows you more information about a file.  In this case we are able to determine if a file is a data file or a human readabe ASCII file by using the file operator.  This is slightly faster than opening each file individually to check if it is human readable, although I am sure there is a way to combine the file and find operations to search through a directory and return all ASCII files."
        },
        {
            "level" : "05",
            "goal" : "The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties: human-readable, 1033 bytes in size, not executable",
            "commands" : "ls, cd, cat, file, du, find",
            "answer": "DXjZPULLxYr17uwoI01bNLQbtFemEgo7",
            "image" : "/images/bandit/level05.png",
            "takeaways" : "Finding a file by size is probably the most specific of the 3 options they give us.  We can find all files that have a size that matches our requirements.  In this case we use -size 1033c.  The c means bytes.  We also could have used the suffix k for kilobytes, M for megabytes or G for gigabytes."
        },
        {
            "level" : "06",
            "goal" : "TThe password for the next level is stored somewhere on the server and has all of the following properties: owned by user bandit7, owned by group bandit6, 33 bytes in size",
            "commands" : "ls, cd, cat, file, du, find, grep",
            "answer": "HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs",
            "image" : "/images/bandit/level06.png",
            "takeaways" : "The password for this level is stored somewhere on the server, not in our level directory. Therefore it is best for us to begin our search at the root level of the server.  We can get to the root with a cd / command. If we run a find command to search for the file size as we did last time, we will get many permission denied errors. We can remove these with the opperator ' -print 2>/dev/null '.  This command essentially takes all permission denied errors and dumps them in a temporary and disposable file called dev/null to make our output be more legible.  This still doesnt help us much though because there are dozens of files on this server that are 33 bytes.  We can get more specific by using the -user and -group options to filter our search results.  This leaves us with only one file on the server matching our criteria, which we can then view to see our password."
        },
        {
            "level" : "07",
            "goal" : "The password for the next level is stored in the file data.txt next to the word millionth",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd",
            "answer": "cvX2JJa4CFALtqS87jk27qwqGhBM9plV",
            "image" : "/images/bandit/level07.png",
            "takeaways" : "For this level we can use grep to search within a file.  In this case we will search for and print the line from the file that contains the word 'millionth'.  By adding a -n opperator to our command we are also able to see that the line with our keyword and password are on line 96,950 of the file readme.txt"
        },
        {
            "level" : "08",
            "goal" : "The password for the next level is stored in the file data.txt and is the only line of text that occurs only once",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd",
            "answer": "UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR",
            "image" : "/images/bandit/level08.png",
            "takeaways" : "In order to find the only line of text that occurs once, we need to make use of the uniq command.  However this command will only be able to find unique line if the lines are listed in order.  Therefore if the lines are are out of order, it will not be able to tell unique lines file wide, but rather only sequentially.  Our workaround for this is to first sort each line of the file alphabetically with the sort command.  We can then append this sort command by adding a pipe (|) to tell it to find the unique lines once the lines in the file have finished sorting.  By appending the -c opperation to uniq, we can print out the count of how many times a line appears in the file.  Our output shows us that each line occurs exactly 10 times, with the exception of one of the line which occurs only once.  This line is our password."
        },
        {
            "level" : "09",
            "goal" : "The password for the next level is stored in the file data.txt in one of the few human-readable strings, beginning with several ‘=’ characters.",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd",
            "answer": "truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk",
            "image" : "/images/bandit/level09.png",
            "takeaways" : "For this challenge we can use the strings command to print out any characters from a file that have human readable strings.  I am sure there are opperators we can use to filter for certain criteria, but the instructions we quite vague so it is easy enough to scroll through the output looking at each line that starts with a series of = characters to find the one that looks like it will be a password."
        },
        {
            "level" : "10",
            "goal" : "The password for the next level is stored in the file data.txt, which contains base64 encoded data",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd",
            "answer": "IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR",
            "image" : "/images/bandit/level10.png",
            "takeaways" : "For this exercise we need to take the base64 encoded text, convert it to binary and convert the binary into ASCII fromat to decode our password. We can use cat to print the encoded data on the screen.  Because we know it is encoded in base64, we can simply use the pipe operator in conjunciton with our cat opperator and use the base64 command with the switch ' -d '.  This tells it to decode the file from base64 to ASCII.  We could also do the inverse and encode ASCII to base64 by using the switch ' -e '. "
        },
        {
            "level" : "11",
            "goal" : "The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd",
            "answer": "5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu",
            "image" : "/images/bandit/level11.png",
            "takeaways" : " Rotating positions by 13 characters is caled a ROT13 encryption and is the second most simple cipher, only to Caesars Ciper.  We can encode and decode this 'encryption' simply by using the tr command in linux.  tr stands for translate.  What we want to do is translate one character into another.  If we adjust by 13 characters that means a maps to n, b to o, etc.  So we cat our file and with the pipe command we modify the output.  The first options we add after the tr command are what we are translating from.  In this case upper case A-Z and lowercase a-z and translating them into upper case N-Z&A-M and lower case n-z&a-m."
        },
        {
            "level" : "12",
            "goal" : "The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)",
            "commands" : "grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd, mkdir, cp, mv, file",
            "answer": " 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL ",
            "image" : "/images/bandit/level12.png",
            "takeaways" : " This level was challenging since it forced us to manipulate the data file many different times. Because the file 'has been repeatedly compressed', we need to repeatedly uncompress it until we are able to find a correct version in an ASCII format we can interperet. We will need to use the 'file' commnad to see what the file type is, move files into a .gz format, use gunzip to uncompress them.  As we move between different formats, we will also uncompress this file into a bzip2 compressed file, which are extracted using the bzip2 -d command, as well as the tar format which are extracted using the tar xvf command.  We rinse and repeat until we get our compressed file back into a readable ASCII format. "
        },
        {
            "level" : "13",
            "goal" : " The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on ",
            "commands" : " ssh, telnet, nc, openssl, s_client, nmap ",
            "answer": " 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e ",
            "image" : "/images/bandit/level13.png",
            "takeaways" : " For this level we simply need to login to the Bandit 14 ssh server using a private key rather than a password.  This is already set up and configured for us, so from the bandit 13 ssh we are logged into, we can enter the command 'ssh bandit14@localhost -i sshkey.private ' which says we want to ssh login to the bandit 14 server from this local machine which we are already on, and we will use the private key in the file sshkey.private in order to autheticate our request against the public key held on the other server (bandit 14). "
        },
        {
            "level" : "14",
            "goal" : " The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost. ",
            "commands" : " ssh, telnet, nc, openssl, s_client, nmap ",
            "answer": " BfMYroe26WYalil77FoDi9qh59eK5xNr ",
            "image" : ["/images/bandit/level14-1.png" , "/images/bandit/level14-2.png" ],
            "takeaways" : " This level needs to be accomplished in 2 steps.  First we need to create a server which will listen on port 30000 and then we need to create a client which will send data to the server on port 30000. Lets start by logging into the bandit14 servers in 2 serperate tabs via terminal.  On one of them we will use netcat to start a listening server.  We do this by using the command nc (for netcat) with the option -l (for listen - this creates a server) and then 30000 (for the port we want it to listen to).  Now in the second tab, lets use this to send the pasword to our listening server.  This is also done via netcat.  Our command is nc 127.0.0.1 30000.  This says that we want to create a netcat client that will send data to localhost on port 30000 which is where we configured our server to be listening.  When we get a blank line, it is waiting for our input so we add the level 14 password and the listening server responds with our level 15 password."
        },
        {
            "level" : "15",
            "goal" : " The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption. Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of that command… ",
            "commands" : " ssh, telnet, nc, openssl, s_client, nmap ",
            "answer": " cluFn7wTiGryunymYOu4RcffSxQluehd ",
            "image" : ["/images/bandit/level15-1.png" , "/images/bandit/level15-2.png" ],
            "takeaways" : " For us to connect to the server and send data via ssh we need to use the s_client command in conjunction with openssl.  This is done simply with the command openssl s_client -connect 127.0.0.1:30001 .  Openssl is stating we want to use ssl certificates, s_client says we are creating a secure client connection, -connect says we want to initiate a connection with the server, and 127.0.0.1:30001 is the address of the server we want to connect to.  We can see that this command creates a signed ssh certificate for our connection to use via the TLS protocal and opens a connection with our server.  We can then enter the password as we did on the previous level and the server returns to us the password for the next level. "
        },
        {
            "level" : "16",
            "goal" : " The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it. ",
            "commands" : " ssh, telnet, nc, openssl, s_client, nmap ",
            "answer": " xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn ",
            "image" : ["/images/bandit/level16-1.png", "/images/bandit/level16-2.png", "/images/bandit/level16-3.png", "/images/bandit/level16-4.png", "/images/bandit/level16-5.png" ],
            "takeaways" : " This level combines all the skills we have learned since level 13 and adds a new skill of port scanning.  Lets start with scanning.  Our command to scan the ports to find the one we need to connect to is nc -zv 127.0.0.1 31000-32000 .  This tells linux we want to use the netcat command to do a verbose scan of local host on port number 31000 to 32000.  Our output from this scan tells us that only one of the ports is open, so we will use port number 31790 in our next step to connect.  Lets establish an ssh connection as we did previously with the command openssl s_client -connect 127.0.0.1:31790 . After our connection is established we can paste our current level 16 password into the server.  The resulting output is a private ssh key!  We already learned how to use this in level 13 so we can do that again.  Lets navigate to our temp dir and create a file with the key we can use.  However this time when we try it we have an error telling us that our private key file is unprotecteced. We will change our permissions in linux via the command chmod 600.  When we try to connect to the ssh server again we are successful!  We can then navigate into our /etc directory for level 17 and find the actual password. "
        },
        {
            "level" : "17",
            "goal" : " There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that has been changed between passwords.old and passwords.new  NOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19 ",
            "commands" : " cat, grep, ls, diff ",
            "answer": " kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd ",
            "image" : ["/images/bandit/level17.png"  ],
            "takeaways" : " We can find the line that is changed by using the diff command.  It will compare the old pawword file to the new password file and let us know what lines have changed.  This shows us the only line that was changed from the old file to the new, and we can grab that and use it to connect to the next level.  When we do this we see that the connection was successful but we are auto-logged out because of some setting configuration on the next level.  Lets move forward to that level and see how to sort that out. "
        }
    ]
}