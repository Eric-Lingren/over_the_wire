{
    "natasData" : [
        {
            "level" : "00",
            "goal" : "Username: natas0 Password: natas0 URL: http://natas0.natas.labs.overthewire.org",
            "answer": "gtVrDuiDfck831PqWsLEZy5gyDz1clto",
            "image" : ["/images/natas/level00.png"],
            "takeaways" : "The password for the next level was hidden in plain text in the html as a comment.  We can find this by opening up our console and examining the elements on the page."
        },
        {
            "level" : "01",
            "goal" : "Username: natas1 URL: http://natas1.natas.labs.overthewire.org",
            "answer": "ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi",
            "image" : ["/images/natas/level01.png"],
            "takeaways" : "The password for the next level was also hidden in plain text in the html comments. Easy to find, but because right click was disable we need to use the Mac shorcut ' command + option + c ' to open the dev tools."
        },
        {
            "level" : "02",
            "goal" : "Username: natas2 URL: http://natas2.natas.labs.overthewire.org",
            "answer": "sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14",
            "image" : ["/images/natas/level02.1.png", "/images/natas/level02.2.png"],
            "takeaways" : "For this level there was no password in the html file.  I looked through all the files on this site in the dev tools - css and js - and there was nothing there that was useful.  The one thing different on this page than the previous pages was that there was a 1px by 1px image.  Making this image larger through the css properties didnt help, nor did viewing it in the developer tools files.  However, finding that file directly on the server yielded some intersting results.  We can see that the path of this image is hosted on the server at /files/pixel.png.  By going to the /files path on the server we are able to view all files hosted on this domain.  Here we find a users file which contains the password we are looking for."
        },
        {
            "level" : "03",
            "goal" : "Username: natas3 URL: http://natas3.natas.labs.overthewire.org",
            "answer": "Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ",
            "image" : ["/images/natas/level03.1.png", "/images/natas/level03.2.png", "/images/natas/level03.3.png"],
            "takeaways" : "The hint in the comments points us in a pretty good direction.  The fact that Google cant find the answer implies that there are poritions of the site that are hidden from Google's indexing robots.  This means the first thing we should do is check this ./robots.txt file to see what the site is hiding from Google. This shows us the hidden route of ./s3cr3t/  When we type this page into the browser, we instantly find a users file, and again within that file is the password for the next level."
        },
        {
            "level" : "04",
            "goal" : "Username: natas4 URL: http://natas4.natas.labs.overthewire.org",
            "answer": "iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq",
            "image" : ["/images/natas/level04.1.png", "/images/natas/level04.2.png", "/images/natas/level04.3.png"],
            "takeaways" : "I thought I had a strong foundation of http requests, but this exercise pushed the envelope.  Based on the instructions we need to send a modified referer header to the server in order to obtain our next password, but this turned out to be a little harder than I thought.  First I inspected the GET requests in the network tab to validate the referrers, but after that things got a little more compicated...  I used console.log(document.referer) in the console to check what the current page referer was.  Then I tried changing that through a JavaScript function.  This indeed worked as you can see in the screenshots, but was unable to modify the GET header when the request was actually sent.  I then tried to modify the a tag with rel and referer options, both of which didn't help us get to our goal.  As I was reading more about referrer headers, I realized this was not something we could simply modify in the console, but rather had to intercept the packet and modify it before forwarding to the server in our GET request.  This forced me to download and try a few different browser extensions which could modify headers, and I finally found one on Firefox called Header Editor which was able to do exactly what we needed - add a header tag called 'referer' and set that value to the url we needed before forwarding the request to the web server. "
        },
        {
            "level" : "05",
            "goal" : "Username: natas5 URL: http://natas5.natas.labs.overthewire.org",
            "answer": "aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1",
            "image" : ["/images/natas/level05.1.png", "/images/natas/level05.2.png"],
            "takeaways" : " Our hint is 'You are not logged in.' Our authentication for logged in sessions can either be maintained with cookies or tokens.  When we look at the request headers we find that they are indeed using a cookie called loggedin which is set to 0 by default.  Easy enough... Lets go ito the application tab, find that cookie and change it to true with a number 1 and then refresh the page.  Just like that we are authenticated and can see the password."
        },
        {
            "level" : "06",
            "goal" : "Username: natas6 URL: http://natas6.natas.labs.overthewire.org",
            "answer": "7z3hEENjQtflzgnT29q7wAvMNfZdh0i9",
            "image" : ["/images/natas/level06.1.png", "/images/natas/level06.2.png",  "/images/natas/level06.3.png"],
            "takeaways" : " When we click the 'view source' link on this page, we are shown the php function they are using to submit the data from the form input to their server.  If we read through that we can see that what is happening is the function is requesting to include some data from a file that lives at /includes/secret.inc and using the data from that file to check if our 'secret' being submitted matched the 'secret' they have on file.  When we append the /includes/secret.inc to our url in the browser we find a file with the input they are requiring.  By pasting this string into the input field and submitting, it reveals our next password. "
        },
        {
            "level" : "07",
            "goal" : "Username: natas7 URL: http://natas7.natas.labs.overthewire.org",
            "answer": "DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe",
            "image" : ["/images/natas/level07.1.png", "/images/natas/level07.2.png"],
            "takeaways" : " This level introduces us to an interesting attack called an  Directory Traversal or Path Traversal attack.  This is based on using Local File Inclusion (LFI) to trick the web server to grant us access to more files than we should be able to see. We know from the comment in the html file that we need to access etc/natas_webpass/natas8, we just need to find where that directory lives on the server.  We also know that we can use PHP's page=? query syntax to request a file through the browser url from some other directory on the server.  So Lets try to exploit this. If we take one of the page urls, ( lets use http://natas7.natas.labs.overthewire.org/index.php?page=home ) and replace the 'home' page with the path we want, ( http://natas7.natas.labs.overthewire.org/index.php?page=../etc/natas_webpass/natas8 ) we expect it to fail.  Which it does. But it doesnt refuse us, rather it just tells us we are in the wrong place for that file.  So by adding a series of ../ to our url, we eventually find the directory where our desired file lives.  Here:  http://natas7.natas.labs.overthewire.org/index.php?page=../../../../etc/natas_webpass/natas8"
        }
    ]
}